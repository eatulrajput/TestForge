task_type: refine_unit_tests

objective:
  - Refine the previously generated test file based on build/test errors.
  - Ensure test cases are compilable and valid.
  - Preserve the intent of the original test logic.

context:
  - Original implementation (main.cpp) must NOT be modified.
  - Tests will be compiled and linked with implementation.
  - LLM-generated tests may have syntax or semantic issues.
  - Source and test files are compiled together.

inputs_provided:
  - Original test file generated by LLM
  - Build and runtime error logs
  - Original source file

allowed_fixes:
  - Add missing includes like <climits>, <cmath>, etc.
  - Insert `extern` function declarations if implementation is unavailable
  - Correct function signatures
  - Remove invalid/unreachable code
  - Split or simplify failing complex test logic
  - Use correct constants/macros (e.g., INT_MAX instead of max int literal)

prohibited_changes:
  - Do NOT modify `main.cpp`, `main.h`, or any source files
  - Do NOT #include source files like "main.cpp"
  - Do NOT use threading, mutexes, condition variables, or STL concurrency
  - Do NOT generate extra explanations or comments
  - Do NOT use non-standard or third-party libraries

refinement_tasks:
  - Fix compilation errors reported by g++
  - Ensure all function calls are valid and declared
  - Group related test cases under test suites
  - Use consistent naming and formatting
  - Ensure code passes both build and runtime test phases
  - Remove duplicate, unreachable, or broken tests

auto_fixes:
  - pattern: '^#include <climits>\s*'
    replacement: '#include <climits>\nextern int add(int, int);'

  - pattern: 'EXPECT_EQ\(INT_MAX, add\(INT_MAX / 2, INT_MAX / 2\)\);'
    replacement: 'EXPECT_EQ(INT_MAX - 1, add(INT_MAX / 2, INT_MAX / 2));'

  - pattern: 'EXPECT_EQ\(INT_MIN, add\(INT_MIN / 2, INT_MIN / 2\)\);'
    replacement: 'EXPECT_EQ(INT_MIN + 1, add(INT_MIN / 2, INT_MIN / 2));'

  - pattern: '^.*I made the following changes:.*$'
    replacement: ''

  - pattern: '^Changes made:.*$'
    replacement: ''

  - pattern: '^.*This test checks.*$'
    replacement: ''

  - pattern: '^\s*I\s*$'
    replacement: ''

output_format:
  - Output a single `test_main.cpp` file only
  - The output must compile using `g++` with Google Test
  - No markdown, no explanations
  - Main function must be included if not using `-lgtest_main`
